exports.parse = function(fname, callback) {
    require('fs').readFile(fname, 'utf8', function(err, config) {
        if (err) {
            callback(err);
            return;
        }

        var result = [];
        var globalModifiers = [];
        var sectionModifiers = null;
        var ruleModifiers = null;
        var skiping = false;
        config.split('\n').forEach(function(line) {
            line = line.trim();
            if (line && line.indexOf('#') != 0) {
                if (line.indexOf('[') == 0 && line.indexOf(']') == line.length - 1) {
                    var sectionName = line.slice(1, -1).trim();
                    skiping = sectionName.indexOf('#') == 0;
                    sectionModifiers = [];
                    ruleModifiers = null;
                } else if (!skiping) {
                    if (line.indexOf('$') == 0) {
                        var parts = line.split(' ');
                        (ruleModifiers || sectionModifiers || globalModifiers).push({
                            name: parts.shift().slice(1),
                            value: parts.join(' ').trim()
                        });
                    } else if (line.indexOf('=>') > -1) {
                        var operands = line.split('=>').map(function(operand) {
                            return operand.trim();
                        });
                        var replacement = operands[1];
                        if (replacement && replacement != '$') {
                            replacement = operands[1].replace(/^(?!(https?:\/\/|file:\/\/|data:))/, 'http://');
                        }
                        ruleModifiers = globalModifiers.concat(sectionModifiers || []);
                        result.push({
                            pattern: createPattern(operands[0]),
                            replacement: replacement,
                            modifiers: ruleModifiers
                        });
                    }

                }
            }
        });
        callback(null, result);
    });
};

function createPattern(source) {
    if (source.indexOf('/') == 0 && source.lastIndexOf('/') == source.length - 1) {
        return new RegExp(source.substr(1, source.length - 2), 'i');
    } else {
        return new RegExp('^' + source.replace(/^(?!http:\/\/)/, 'http://').replace(/([\\\/^$()\[\]+*?.|])/g, '\\$1'), 'i');
    }
}