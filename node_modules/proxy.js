exports.createServer = function(rewriter) {
    rewriter = rewriter || function(url) {
        return url;
    };
    return require('http').createServer(function(serverReq, serverRes) {
        var url = rewriter(serverReq.url);
        if (!url) {
            serverRes.end();
            return;
        }
        if (url.indexOf('file://') == 0) {
            fileRequest(serverRes, url.substr(7).split('?')[0]);
        } else if (url.indexOf('http://') == 0) {
            httpRequest(serverReq, serverRes, url);
        }
    });
};


function httpRequest(serverReq, serverRes, url) {
    var location = require('url').parse(url);
    var host = location.hostname || serverReq.headers['host'];
    var requestOptions = {
        host: host,
        port: +(location.port || host.split(':')[1] || 80),
        method: serverReq.method,
        path: location.pathname + (location.search || '') + (location.hash || ''),
        headers: serverReq.headers
    };
    var clientReq = require('http').request(requestOptions, function(clientRes) {
        serverRes.writeHead(clientRes.statusCode, clientRes.headers);
        clientRes.on('data', function(data) {
            serverRes.write(data);
        });
        clientRes.on('end', function() {
            serverRes.end();
        });
    });

    clientReq.on('error', function(err) {
        console.log('Request error: ' + err.message);
        serverRes.end();
    });

    serverReq.on('data', function(data) {
        clientReq.write(data);
    });

    serverReq.on('end', function() {
        clientReq.end();
    });
}


function fileRequest(serverRes, fname) {
    require('path').exists(fname, function(exists) {
        if (exists) {
            require('fs').stat(fname, function(err, stat) {
                if (err) {
                    console.log('File stat error: ' + err.message);
                    return;
                }

                if (stat.isFile()) {
                    var parts = fname.split('.');
                    var mimeType = require('mime').getType(parts[parts.length - 1]);
                    if (mimeType.substr(0, 4) == 'text' || mimeType.indexOf('xml') >= 0 || mimeType.indexOf('json') >= 0 || mimeType.indexOf('javascript') >= 0) {
                        mimeType += '; charset=UTF-8';
                    }
                    serverRes.writeHead(200, {
                        'Content-Type': mimeType
                    });
                    require('fs').readFile(fname, function(err, content) {
                        if (err) {
                            console.log('File read error: ' + err.message);
                            return;
                        }

                        serverRes.write(content);
                        serverRes.end();
                    });

                } else if (stat.isDirectory()) {
                    fileRequest(serverRes, require('path').join(fname, 'index.html'));
                } else {
                    serverRes.end();
                }
            })
        } else {
            serverRes.writeHead(404, {
                'Content-Type': 'text/html; charset=UTF-8'
            });
            serverRes.write('Not found');
            serverRes.end();
        }
    });
}